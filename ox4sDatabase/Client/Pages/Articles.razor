@page "/articles"
@using ox4sDatabase.Shared
@using System.Reflection
@using ox4sDatabase.Client.Components
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@inject HttpClient Http

<ArticlesNavMenue/>

<h3>Articles</h3>

@*<Table Items="_articles" NotPresentedDetails="_notPresentedDetails"></Table>*@

<div Id="articletable"></div>

@*<script>

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        document.getElementById("articletable").innerHTML = this.responseText;
      }
      else{
              document.getElementById("articletable").innerHTML = "preparing Table....";

      }
    };
    xhttp.open("GET", "/table?Items=@_articles&NotPresentedDetails=@_notPresentedDetails", true);
    xhttp.send();

</script>*@

@code {
    private List<string> _notPresentedDetails = new() { nameof(Article.Id) };
    private List<Article>? _articles = new();

    private Table<Article> _articleTable { get; set; }
    

    private const int MinPageSize = 50;
    private const int MaxPageSize = 1000;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _articles = await Http.GetFromJsonAsync<List<Article>>($"/articles");
    }

    //private async Task Search()
    //{
    //    articles = await Http.GetFromJsonAsync<List<Article>>($"/api/articles?size={Uri.EscapeDataString(filter)}");
    //}

    //private async Task Add()
    //{
    //    using (var msg = await Http.PostAsJsonAsync<Article>("/api/articles", newArticle, System.Threading.CancellationToken.None))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            articles.Add(await msg.Content.ReadFromJsonAsync<Article>());
    //            foreach (var propertyInfo in newArticle.GetType().GetProperties())
    //            {
    //                if (propertyInfo.Name != nameof(Article.Id))
    //                {
    //                    propertyInfo.SetValue(typeof(Article), null);
    //                }
    //            }
    //        }
    //    }
    //}

    private async Task Save(ChangeEventArgs e, Article article, string propField)
    {
        PropertyInfo pinfo = typeof(Articles).GetProperty(propField);
        pinfo.SetValue(article, e.Value);

        using (var msg = await Http.PutAsJsonAsync<Article>($"/api/articles/{article.Id}", article, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
            }
            else
            {
    // DO SOMETHING
            }
        }
    }

    //private async Task Delete(Guid id)
    //{
    //    using (var msg = await Http.DeleteAsync($"/api/customers/{id}"))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            int i;
    //            for (i = 0; i < articles.Count && articles[i].Id != id; i++) ;
    //            articles.RemoveAt(i);
    //        }
    //    }
    //}

}
@page "/articles"
@using Microsoft.Fast.Components.FluentUI
@using ox4sDatabase.Shared
@using System.Reflection

@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@inject HttpClient Http


<h3>Articles</h3>

@*<form onsubmit="return false;">
	<div class="input-group input-group-md mb-2">
		<span class="input-group-text">Search by Name</span>
		<input type="text" class="form-control" @bind-value="filter" />
		<button class="btn btn-primary" @onclick="Search">Search</button>
	</div>
</form>*@

@if (articles == null)
{
	<p><em>Loading...</em></p>
}

<SfGrid DataSource="@articles" AllowResizing="true" AllowFiltering="true" Toolbar="@Tool">
    <GridColumns>
        <GridColumn Field="@nameof(Article.Hersteller)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_1)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_2)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_3)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_4)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_5)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_6)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Lieferant_7)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.PositionsName)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.KurzName)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.LangName)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Kategorie)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.HerstellerArtikelNummer)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.LieferantenArtikelNummer_1)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.LieferantenArtikelNummer_2)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.EinheitsPreis_1_Netto)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.EinheitsPreis_2_Netto)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.PE)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.VPE)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Einheit)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Rabatt)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.RabattierterNettoPreis)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.AlternativArtikelNummer)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.VK_10)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.VK_15)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.VK_20)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Bemerkungen)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.InternerLink)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.ExternerLink)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Hoehe)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Breite)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.Tiefe)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.UmgebungstemperaturBetrieb)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.LieferZeit)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.QStatus)" Width="130"></GridColumn>
        <GridColumn Field="@nameof(Article.LagerPlatz)" Width="130"></GridColumn>
    </GridColumns>
</SfGrid>

<style>
    .e-grid{
        font-size: 8px;  
    }
    e-headercell{
        font-size: 8px;   
    }
</style>


@*<form class="mt-5" onsubmit="return false;">
	<div class="input-group input-group-md mb-2">
		<span class="input-group-text">@nameof(Article.Hersteller)</span>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newArticle.Hersteller" />
	</div>
	<div class="input-group input-group-md mb-2">
		<span class="input-group-text">@nameof(Article.PositionsName)</span>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newArticle.PositionsName" />
	</div>
	<div class="input-group input-group-md mb-2">
		<span class="input-group-text">@nameof(Article.HerstellerArtikelNummer)</span>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newArticle.HerstellerArtikelNummer" />
		<button class="btn btn-success" @onclick="Add">Add</button>
	</div>
</form>*@

@code {

    private List<string> Tool = (new List<string>() { "Search" });

    private List<Article> articles;
    private Article newArticle = new Article();
    private string filter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        articles = await Http.GetFromJsonAsync<List<Article>>("/articles");
    }

    //private async Task Search()
    //{
    //    articles = await Http.GetFromJsonAsync<List<Article>>($"/api/articles?name={Uri.EscapeDataString(filter)}");
    //}

    //private async Task Add()
    //{
    //    using (var msg = await Http.PostAsJsonAsync<Article>("/api/articles", newArticle, System.Threading.CancellationToken.None))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            articles.Add(await msg.Content.ReadFromJsonAsync<Article>());
    //            foreach (var propertyInfo in newArticle.GetType().GetProperties())
    //            {
    //                if (propertyInfo.Name != nameof(Article.Id))
    //                {
    //                    propertyInfo.SetValue(typeof(Article), null);
    //                }
    //            }
    //        }
    //    }
    //}

    private async Task Save(ChangeEventArgs e, Article article, string propField)
    {
        PropertyInfo pinfo = typeof(Articles).GetProperty(propField);
        pinfo.SetValue(article, e.Value);

        using (var msg = await Http.PutAsJsonAsync<Article>($"/api/articles/{article.Id}", article, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
            }
            else
            {
    // DO SOMETHING
            }
        }
    }

    //private async Task Delete(Guid id)
    //{
    //    using (var msg = await Http.DeleteAsync($"/api/customers/{id}"))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            int i;
    //            for (i = 0; i < articles.Count && articles[i].Id != id; i++) ;
    //            articles.RemoveAt(i);
    //        }
    //    }
    //}

}
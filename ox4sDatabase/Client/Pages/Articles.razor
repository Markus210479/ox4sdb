@page "/articles"
@using ox4sDatabase.Shared
@using System.Reflection
@using ox4sDatabase.Client.Components
@using System.Linq.Expressions;
@using System.Reflection.PortableExecutable
@inject HttpClient Http

<h3>Articles</h3>

<ArticleTable Articles="articles" NotPresentedDetails="_notPresentedDetails"/>

@code {
    private List<string> _notPresentedDetails = new() { nameof(Article.Id) };
    private List<Article> articles = new();
    private string filter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        articles = await Http.GetFromJsonAsync<List<Article>>($"/articles");
    }

    private async Task Search()
    {
        articles = await Http.GetFromJsonAsync<List<Article>>($"/api/articles?size={Uri.EscapeDataString(filter)}");
    }

    //private async Task Add()
    //{
    //    using (var msg = await Http.PostAsJsonAsync<Article>("/api/articles", newArticle, System.Threading.CancellationToken.None))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            articles.Add(await msg.Content.ReadFromJsonAsync<Article>());
    //            foreach (var propertyInfo in newArticle.GetType().GetProperties())
    //            {
    //                if (propertyInfo.Name != nameof(Article.Id))
    //                {
    //                    propertyInfo.SetValue(typeof(Article), null);
    //                }
    //            }
    //        }
    //    }
    //}

    private async Task Save(ChangeEventArgs e, Article article, string propField)
    {
        PropertyInfo pinfo = typeof(Articles).GetProperty(propField);
        pinfo.SetValue(article, e.Value);

        using (var msg = await Http.PutAsJsonAsync<Article>($"/api/articles/{article.Id}", article, System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
            }
            else
            {
    // DO SOMETHING
            }
        }
    }

    private async Task Delete(Guid id)
    {
        using (var msg = await Http.DeleteAsync($"/api/customers/{id}"))
        {
            if (msg.IsSuccessStatusCode)
            {
                int i;
                for (i = 0; i < articles.Count && articles[i].Id != id; i++) ;
                articles.RemoveAt(i);
            }
        }
    }

}